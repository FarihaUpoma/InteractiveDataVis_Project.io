function barchart(svg_id, data){    var svg = d3.select(svg_id),        margin = 100,        width = $(svg_id).width() - margin,        height = $(svg_id).height() - margin;        console.log(height);    var xScale = d3.scaleBand().range( [0, width] ).padding(0.4),        yScale = d3.scaleLinear().range( [height, 0] );            var g = svg.append("g")                .attr("transform", "translate(" + 50 + "," + 50 + ")");    var satv_count = 0, satm_count = 0, act_count = 0;//    var allGroup = ["SAT", "ACT"];////        // add the options to the button//        d3.select("#selectExam")//          .selectAll('myOptions')//            .data(allGroup)//          .enter()//            .append('option')//          .text(function (d) { return d; }) // text showed in the menu//          .attr("value", function (d) { return d; })    data.then(data=>{        for (var i=0; i<data.length; i++){            satv_count += data[i]["satv"];            satm_count += data[i]["satm"];            act_count += data[i]["act"];        };        satv_count = satv_count/data.length;        satm_count = satm_count/data.length;        act_count = act_count / data.length;//        console.log(satv_count);//        console.log(satm_count);                        var info = [            {xaxis: "SATV", avg: satv_count},            {xaxis: "SATM", avg: satm_count},//            {xaxis: "ACT", avg: act_count},        ];//        var infoAct = [//            {xaxis: "ACT", avg: act_count},//        ];        horizon = info.map(function(object){            return object.xaxis;        });        vertical = info.map(function(object){            return object.avg;        });        var maxVal = d3.max(vertical);//        horizonA = infoAct.map(function(object){//            return object.xaxis;//        });//        verticalA = infoAct.map(function(object){//            return object.avg;//        });////        var maxValA = d3.max(verticalA);        var div = d3.select("body").append("div")            .attr("class", "tooltip")            .style("opacity", 0);                xScale.domain(horizon);        yScale.domain([0, maxVal]);                var xAxis = g.append("g")            .attr("transform", "translate(0," + height + ")")            .call(d3.axisBottom(xScale));                var yAxis = g.append("g")            .call(d3.axisLeft(yScale))            .append("text")            .attr("y", 6)            .attr("dy", "0.71em")            .attr("text-anchor", "end")            .text("value");                    var barColors = d3.scaleOrdinal()            .domain(['SATM', 'SATV'])            .range(["teal", "coral"])        g.selectAll("bar")            .data(info)            .enter().append("rect")            .attr("x", function(d) {            return xScale(d.xaxis); })            .attr("y", function(d) { return 0; })            .attr("width", xScale.bandwidth() )            .attr("height", function(d) { return 0; })            .style("fill", function(d) { return barColors(d.xaxis) });        g.selectAll("rect")           .on("mouseover", function(d, i) {//                d3.select(this).transition()//                  .duration(500)//                  .attr("d", arcOver);                div.transition()                        .duration(200)                        .style("background-color",barColors(d.xaxis))                        .style("opacity", .9);                if (i == 0) {                    div.html("SATV Average Score Among Students: "+satv_count)                            .style("left", (width+118) + "px")                            .style("top", (d3.event.pageY - 28) + "px");                }                else if (i == 1) {                    div.html("SATM Average Score Among Students: "+satm_count)                            .style("left", (width+118) + "px")                            .style("top", (d3.event.pageY - 28) + "px");                }              })            .on("mouseout", function(d) {                div.style("opacity", 0);//                d3.select(this).transition()//                  .duration(500)//                  .attr("d", arcGenerator);              })          .transition()          .duration(800)          .attr("y", function(d) { return yScale(d.avg); })          .attr("height", function(d) {//          return height - y(d.Value); })             return height - yScale(d.avg); })//          .delay(function(d,i){console.log(i) ; return(i*100)})    });}function scatter(svg_id, data) {    var svg = d3.select(svg_id),        margin = 100,        width = $(svg_id).width() - margin,        height = $(svg_id).height() - margin;    var g = svg.append("g")                .attr("transform", "translate(" + 50 + "," + 50 + ")");    var allGroup = ["SATV", "SATM", "GPA", "ACT"];    var allGroup2 = ["GPA", "SATV", "SATM", "ACT"];        // add the options to the button        d3.select("#selectX")          .selectAll('myOptions')            .data(allGroup)          .enter()            .append('option')          .text(function (d) { return d; }) // text showed in the menu          .attr("value", function (d) { return d; })        d3.select("#selectY")          .selectAll('myOptions')            .data(allGroup2)          .enter()            .append('option')          .text(function (d) { return d; }) // text showed in the menu          .attr("value", function (d) { return d; })//    var margin = {top: 10, right: 30, bottom: 30, left: 100},//    width = 460 - margin.left - margin.right,//    height = 400 - margin.top - margin.bottom;////    var svg = d3.select(svg_id)//      .append("svg")//        .attr("width", width + margin.left + margin.right)//        .attr("height", height + margin.top + margin.bottom)//      .append("g")//        .attr("transform",//              "translate(" + margin.left + "," + margin.top + ")");    data.then(data => {        var maxSatm = 0, maxSatv = 0, maxGpa = 0, maxAct = 0;        for( var i = 0 ; i < data.length ; i++) {            console.log(data[i].index);            if(data[i]["gpa"] > maxGpa) {                maxGpa = data[i]["gpa"];            }            if(data[i]["satm"] > maxSatm) {                maxSatm = data[i]["satm"];            }            if(data[i]["satv"] > maxSatv) {                maxSatv = data[i]["satv"];            }            if(data[i]["act"] > maxAct) {                maxAct = data[i]["act"];            }        };        console.log(maxSatm, maxSatv, maxAct);        var x = d3.scaleLinear()            .domain([0, maxGpa])            .range([ 0, width ]);        var xAxis = g.append("g")            .attr("transform", "translate(0," + height + ")")            .call(d3.axisBottom(x));        var y = d3.scaleLinear()            .domain([0, maxSatv+ 100])            .range([ height, 0]);        var yAxis = g.append("g")            .call(d3.axisLeft(y));        var color = d3.scaleOrdinal()            .domain(["SATV", "GPA" ])            .range([ "#440154ff", "#21908dff"])//        var clip = g.append("defs").append("svg:clipPath")//              .attr("id", "clip")//              .append("svg:rect")//              .attr("width", width )//              .attr("height", height )//              .attr("x", 0)//              .attr("y", 0);//        // Add brushing//        var brush = d3.brushX()                 // Add the brush feature using the d3.brush function//          .extent( [ [0,0], [width,height] ] ) // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area//          .on("end", updateChart)        var div = d3.select("body").append("div")                    .attr("class", "tooltip")                    .style("opacity", 0);//        var scatter = g.append('g')//            .attr("clip-path", "url(#clip)")        var scatter = g.append("g")            .selectAll("dot")            .data(data)            .enter()            .append("circle")//              .attr("class", function (d) { return "dot " + d.sex } )              .attr("cx", function (d) { return x(d.gpa); } )              .attr("cy", function (d) { return y(d.satv); } )              .attr("r", 5)              .style("fill", "#69b3a2" )              .attr("stroke", "black")                .style("stroke-width", "2px")                .style("opacity", 0.7)                .on("mouseover", function(d) {                    d3.select(this).attr("r", 10).style("fill", "red");                    div.transition()                        .duration(200)                        .style("background-color","#69b3a2")                        .style("opacity", .9);                    div.html("GPA: "+d.gpa+"<br/>"+                    "SATV: "+d.satv+"<br/>"+                    "SATM: "+d.satm + "<br/>"  +                    "ACT: "+ d.act)//                        .style("left", (d3.event.pageX + 100) + "px")//                        .style("top", (d3.event.pageY - 28) + "px");                        .style("left", (width + 118) + "px")                        .style("top", (d3.event.pageY - 28) + "px");                    })                .on("mouseout", function(d) {                    d3.select(this).attr("r", 5).style("fill", "#69b3a2");                    div.style("opacity", 0);            })            function update(selectedX, selectedY) {              // Create new data with the selection?//              var dataFilter = data.map(function(d){return {time: d.time, value:d[selectedGroup]} })                console.log("select: ", selectedX, selectedY);              if(selectedX == "SATM") {                xd = maxSatm;              }              else if( selectedX == "SATV") {                xd = maxSatv;              }              else if( selectedX == "GPA") {                xd = maxGpa;              }              else if( selectedX == "ACT") {                xd = maxAct;              }              x.domain([0, xd]);              xAxis.transition().duration(1000).call(d3.axisBottom(x));              if(selectedY == "SATM") {                yd = maxSatm;              }              else if( selectedY == "SATV") {                yd = maxSatv;              }              else if( selectedY == "GPA") {                yd = maxGpa;              }              else if( selectedY == "ACT") {                yd = maxAct;              }              y.domain([0, yd]);              yAxis.transition().duration(1000).call(d3.axisLeft(y));              // Give these new data to update line              var sx = selectedX.toLowerCase();              var sy = selectedY.toLowerCase();              scatter                  .transition()                  .duration(1000)                  .attr("cx", function (d) { return x(d[sx]); } )                  .attr("cy", function (d) { return y(d[sy]); } )                  .attr("r", 5)                  .style("fill", "#69b3a2" )                  .attr("stroke", "black")                    .style("stroke-width", "2px")                    .style("opacity", 0.7)//              dot//                .data(data)//                .transition()//                .duration(1000)//                  .attr("cx", function(d) { return x(+d.time) })//                  .attr("cy", function(d) { return y(+d.value) })            }            // When the button is changed, run the updateChart function            d3.selectAll(".selectButton").on("change", function(d) {                // recover the option that has been chosen                var selectedX = d3.select("#selectX").property("value");                var selectedY = d3.select("#selectY").property("value");                console.log("press: ", selectedX, selectedY);                // run the updateChart function with this selected option                update(selectedX, selectedY);            })//            scatter.append("g")//                .attr("class", "brush")//                .call(brush)//            var idleTimeout = function idled() { idleTimeout = null; };////          // A function that update the chart for given boundaries//          function updateChart() {////            extent = d3.event.selection;//            console.log("event: ", extent);////            // If no selection, back to initial coordinate. Otherwise, update X axis domain//            if(!extent) {//            console.log("no change");//              if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit//              x.domain([ 0, maxGpa]);//            }//            else {//            console.log("change", x.invert(extent[0]), extent[1]);//              x.domain([ x.invert(extent[0]), x.invert(extent[1]) ]);//              scatter.select(".brush").call(brush.move, null) // This remove the grey brush area as soon as the selection has been done//            }////            // Update axis and circle position//            xAxis.transition().duration(1000).call(d3.axisBottom(x))//            scatter//              .selectAll("circle")//              .transition().duration(1000)//              .attr("cx", function (d) { return x(d.gpa); } )//              .attr("cy", function (d) { return y(d.satv); } )////            }    });}function barchartStack(svg_id, data) {    var svg = d3.select(svg_id),        margin = 100,        width = $(svg_id).width() - margin,        height = $(svg_id).height() - margin;    var g = svg.append("g")                .attr("transform", "translate(" + 50 + "," + 50 + ")");    // Parse the Data    data.then(data => {        dc = data;        var g1Satv = 0, g1Satm = 0, g1Act = 0, g1c = 0;        var g2Satv = 0, g2Satm = 0, g2Act = 0, g2c = 0;        var g3Satv = 0, g3Satm = 0, g3Act = 0, g3c = 0;        var g4Satv = 0, g4Satm = 0, g4Act = 0, g4c = 0;        for (var i=0; i<data.length; i++){            if (data[i]["gpa"] <= 2.5) {                g1Satv += data[i]["satv"];                g1Satm += data[i]["satm"];                g1Act += data[i]["act"];                g1c += 1;            }            else if (data[i]["gpa"] <= 3.0) {                g2Satv += data[i]["satv"];                g2Satm += data[i]["satm"];                g2Act += data[i]["act"];                g2c += 1;            }            else if (data[i]["gpa"] <= 3.5) {                g3Satv += data[i]["satv"];                g3Satm += data[i]["satm"];                g3Act += data[i]["act"];                g3c += 1;            }            else {                g4Satv += data[i]["satv"];                g4Satm += data[i]["satm"];                g4Act += data[i]["act"];                g4c += 1;            }        };      // List of subgroups = header of the csv files = soil condition here//      var subgroups = data.columns.slice(1);      var subgroups = ["satv", "satm", "act"];      var info = [            {gpa: 0, satv: g1Satv/g1c, satm: g1Satv/g1c, act: g1Act/g1c},            {gpa: 1, satv: g2Satv/g2c, satm: g2Satm/g2c, act: g2Act/g2c},            {gpa: 2, satv: g3Satv/g3c, satm: g3Satm/g3c, act: g3Act/g3c},            {gpa: 3, satv: g4Satv/g4c, satm: g4Satm/g4c, act: g4Act/g4c},        ];      // List of groups = species here = value of the first column called group -> I show them on the X axis//      var groups = d3.map(data, function(d){return(d.class)}).keys()//        var groups = ["GPA < 2.5", "GPA 2.5-3.0", "GPA 3.0-3.5", "GPA 3.5-4.0"];        var grps = [0,1,2,3];      // Add X axis      var x = d3.scaleBand()          .domain(groups)          .range([0, width])          .padding([0.4])      g.append("g")        .attr("transform", "translate(0," + height + ")")        .call(d3.axisBottom(x).tickSizeOuter(0));      // Add Y axis      var y = d3.scaleLinear()        .domain([0, 1600])        .range([ height, 0 ]);      g.append("g")        .call(d3.axisLeft(y));      // color palette = one color per subgroup      var color = d3.scaleOrdinal()        .domain(subgroups)        .range(['deeppink','mediumturquoise', 'royalblue'])//#e41a1c      //stack the data? --> stack per subgroup      var stackedData = d3.stack()        .keys(subgroups)        (info)        console.log("stack: ", stackedData);      // Show the bars      var bar = g.append("g")        .selectAll("g")        // Enter in the stack data = loop key per key = group per group        .data(stackedData)        .enter().append("g")          .attr("fill", function(d) {          return color(d.key); })          .style("opacity", 0.7)          .selectAll("rect")          // enter a second time = loop subgroup per subgroup to add all rectangles          .data(function(d) {//          console.log("d: ", d);          return d; })          .enter().append("rect")            .attr("x", function(d) {            console.log("x:", d.data.gpa, groups[d.data.gpa], x(groups[d.data.gpa]));            return x(groups[d.data.gpa]); })            .attr("y", function(d) { return 0; })            .attr("height", function(d) {//             return y(d[0]) - y(d[1]); })             return 0; })            .attr("width",x.bandwidth())        var div = d3.select("body").append("div")            .attr("class", "tooltip")            .style("opacity", 0);      g.selectAll("rect")        .on("mouseover", function(d, i) {//            d3.select(this).select("g").style("opacity", 1);//                d3.select(this).transition()//                  .duration(500)//                  .attr("d", arcOver);            div.transition()                    .duration(200)//                    .style("background-color","lightsalmon")                    .style("opacity", .9);            if (i == 0) {                div.html("SATV Average Score for</br> Students with GPA <2.5:</br>"+g1Satv/g1c)                        .style("left", (width+118) + "px")                        .style("top", (d3.event.pageY - 28) + "px");            }            else if (i == 1) {                div.html("SATV Average Score for</br> Students with GPA 2.5-3.0:</br>"+g2Satv/g2c)                        .style("left", (width+118) + "px")                        .style("top", (d3.event.pageY - 28) + "px");            }            else if (i == 2) {                div.html("SATV Average Score for</br> Students with GPA 3.0-3.5:</br>"+g3Satv/g3c)                        .style("left", (width+118) + "px")                        .style("top", (d3.event.pageY - 28) + "px");            }            else if (i == 3) {                div.html("SATV Average Score for</br> Students with GPA 3.5-4.0:</br>"+g4Satv/g4c)                        .style("left", (width+118) + "px")                        .style("top", (d3.event.pageY - 28) + "px");            }            else if (i == 4) {                div.html("SATM Average Score for</br> Students with GPA < 2.5:</br>"+g1Satm/g1c)                        .style("left", (width+118) + "px")                        .style("top", (d3.event.pageY - 28) + "px");            }            else if (i == 5) {                div.html("SATM Average Score for</br> Students with GPA 2.5-3.0:</br>"+g2Satm/g2c)                        .style("left", (width+118) + "px")                        .style("top", (d3.event.pageY - 28) + "px");            }            else if (i == 6) {                div.html("SATM Average Score for</br> Students with GPA 3.0-3.5:</br>"+g3Satm/g3c)                        .style("left", (width+118) + "px")                        .style("top", (d3.event.pageY - 28) + "px");            }            else if (i == 7) {                div.html("SATM Average Score for</br> Students with GPA 3.5-4.0:</br>"+g4Satm/g4c)                        .style("left", (width+118) + "px")                        .style("top", (d3.event.pageY - 28) + "px");            }            else if (i == 8) {                div.html("ACT Average Score for</br> Students with GPA < 2.5:</br>"+g1Act/g1c)                        .style("left", (width+118) + "px")                        .style("top", (d3.event.pageY - 28) + "px");            }            else if (i == 9) {                div.html("ACT Average Score for</br> Students with GPA 2.5-3.0:</br>"+g2Act/g2c)                        .style("left", (width+118) + "px")                        .style("top", (d3.event.pageY - 28) + "px");            }            else if (i == 10) {                div.html("ACT Average Score for</br> Students with GPA 3.0-3.5:</br>"+g3Act/g3c)                        .style("left", (width+118) + "px")                        .style("top", (d3.event.pageY - 28) + "px");            }            else if (i == 11) {                div.html("ACT Average Score for</br> Students with GPA 3.5-4.0:</br>"+g4Act/g4c)                        .style("left", (width+118) + "px")                        .style("top", (d3.event.pageY - 28) + "px");            }          })        .on("mouseout", function(d) {            div.style("opacity", 0);////                d3.select(this).transition()////                  .duration(500)////                  .attr("d", arcGenerator);          })          .transition()          .duration(800)          .attr("y", function(d) { return y(d[1]); })          .attr("height", function(d, i) {//          return height - y(d.Value); })             return y(d[0]) - y(d[1]); })//          .delay(function(d,i){console.log(i) ; return(i*100)})        // Add one dot in the legend for each name.        var size = 20        g.append("g")        .selectAll("g")        .data(stackedData)          .enter()          .append("rect")            .attr("x", width-50)            .attr("y", function(d,i){ return 5 + i*(size+5)-40}) // 100 is where the first dot appears. 25 is the distance between dots            .attr("width", size)            .attr("height", size)            .style("fill", function(d){ return color(d.key)})        // Add one dot in the legend for each name.        g.append("g")        .selectAll("g")        .data(stackedData)          .enter()          .append("text")            .attr("x", width + size*1.2-50)            .attr("y", function(d,i){ return 5 + i*(size+5) + (size/2)-37}) // 100 is where the first dot appears. 25 is the distance between dots            .style("fill", function(d){ return color(d.key)})            .style("opacity", 0.7)            .text(function(d){ return d.key})            .attr("text-anchor", "left")            .style("alignment-baseline", "middle")    });}function piechart(svg_id, data) {    data.then(data => {        var g1 = 0, g2 = 0, g3 = 0, g4 = 0, g5 = 0;        for (var i=0; i < data.length; i++){            if( data[i]["gpa"] < 2.5) {                g1 += 1;            }            else if( data[i]["gpa"] < 3.0) {                g2 += 1;            }            else if( data[i]["gpa"] < 3.3) {                g3 += 1;            }            else if( data[i]["gpa"] < 3.6) {                g4 += 1;            }            else {                g5 += 1            }        };        console.log(g1, g2);        console.log(g3, g4);        var margin = 100;        var width = $(svg_id).width(),            height = $(svg_id).height();        var radius = Math.min(width, height) / 2 - margin;        var w = width / 2 , h = height /2;        var svg = d3.select(svg_id)          .append("svg")            .attr("width", width)            .attr("height", height)          .append("g")            .attr("transform", "translate(" + w + "," + h + ")");        var data = {"GPA < 2.5": g1, "GPA 2.5-3.0": g2, "GPA 3.0-3.3": g3, "GPA 3.3-3.6": g4, "GPA 3.6-4.0": g5};        var dataMax = g1+g2+g3+g4;        var color = d3.scaleOrdinal()          .domain(data)          .range(d3.schemeSet1);        var pie = d3.pie()          .value(function(d) {return d.value; });        var data_ready = pie(d3.entries(data));        var arcGenerator = d3.arc()          .innerRadius(0)          .outerRadius(radius);        var arcOver = d3.arc()          .innerRadius(0)          .outerRadius(radius + 30);        var duration = 250;        var div = d3.select("body").append("div")                    .attr("class", "tooltip")                    .style("opacity", 0);        var arcs = svg.selectAll('mySlices')                    .data(data_ready)                  .enter().append("g")                    .attr("class", "arcGenerator");        arcs.append("path")            .attr('d', arcGenerator)            .attr("fill", function(d) { return color(d.data.key); })            .attr("stroke", "black")            .style("stroke-width", "2px")            .style("opacity", 0.7)           .on("mouseover", function(d, i) {                d3.select(this).transition()                  .duration(500)                  .attr("d", arcOver);                div.transition()                        .duration(200)                        .style("background-color",color(d.data.key))                        .style("opacity", .7);                div.html(d.data.key + "</br>"+"No. of Students: "+d.data.value)                        .style("left", (width+18) + "px")                        .style("top", (d3.event.pageY - 28) + "px");              })            .on("mouseout", function(d) {                d3.select(this).transition()                  .duration(500)                  .attr("d", arcGenerator);                div.style("opacity", 0);              })          .transition()            .ease(d3.easeBounce)            .duration(2000)            .attrTween("d", tweenPie)//        svg//          .selectAll('mySlices')//          .data(data_ready)//          .enter()//          .append('path')//            .attr('d', arcGenerator)//            .attr('fill', function(d){ return(color(d.data.key)) })//            .attr("stroke", "black")//            .style("stroke-width", "2px")//            .style("opacity", 0.7)//            .transition()//                .ease("bounce")//                .duration(2000)//                .attrTween("d", tweenPie)//            .transition()//                .ease("elastic")//                .delay(function(d, i) { return 2000 + i * 50; })//                .duration(750)//                .attrTween("d", tweenDonut);        svg          .selectAll('mySlices')          .data(data_ready)          .enter()          .append('text')          .text(function(d){ return (d3.format(".2f")((d.data.value/dataMax)*100))+"%"})          .attr("transform", function(d) { return "translate(" + arcGenerator.centroid(d) + ")";  })          .style("text-anchor", "middle")          .style("font-size", 17);    // Add one dot in the legend for each name.        var size = 20        svg.selectAll("mydots")          .data(data_ready)          .enter()          .append("circle")            .attr("cx", 252)            .attr("cy", function(d,i){ return i*25- 227}) // 100 is where the first dot appears. 25 is the distance between dots            .attr("r", 7)            .style("fill", function(d){ return color(d.data.key)})            .attr("stroke", "black")            .style("stroke-width", "2px")            .style("opacity", 0.7)//            .attr("x", 250)//            .attr("y", function(d,i){ return 5 + i*(size+5)-240}) // 100 is where the first dot appears. 25 is the distance between dots//            .attr("width", size)//            .attr("height", size)//            .style("fill", function(d){ return color(d.data.key)})        // Add one dot in the legend for each name.        svg.selectAll("mylabels")          .data(data_ready)          .enter()          .append("text")            .attr("x", 250 + size*1.2)            .attr("y", function(d,i){ return 5 + i*(size+5) + (size/2)-237}) // 100 is where the first dot appears. 25 is the distance between dots            .style("fill", function(d){ return color(d.data.key)})            .text(function(d){ return d.data.key + ": "+ d.data.value})            .attr("text-anchor", "left")            .style("alignment-baseline", "middle")        function tweenPie(b) {              b.innerRadius = 0;              var i = d3.interpolate({startAngle: 0, endAngle: 0}, b);              return function(t) { return arcGenerator(i(t)); };        }    });}